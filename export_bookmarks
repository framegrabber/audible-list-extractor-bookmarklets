const fs = require('fs').promises;
const path = require('path');
const netscape = require('netscape-bookmarks');
const yargs = require('yargs/yargs');
const { hideBin } = require('yargs/helpers');

async function readFileContent(filePath) {
    try {
        return await fs.readFile(filePath, 'utf-8');
    } catch (error) {
        console.error(`Error reading file ${filePath}:`, error.message);
        return null;
    }
}

async function createBookmarksFromFiles(filePaths, folderName = null) {
    let bookmarks = {};

    for (const filePath of filePaths) {
        const content = await readFileContent(filePath);
        if (content !== null) {
            const fileName = path.basename(filePath, path.extname(filePath));
            const url = content.trim();
            bookmarks[fileName] = url;
        }
    }

    if (folderName) {
        return { [folderName]: { contents: bookmarks } };
    }
    return bookmarks;
}

async function main() {
    const argv = yargs(hideBin(process.argv))
        .option('folder', {
            alias: 'f',
            type: 'string',
            description: 'Folder name to group bookmarks'
        })
        .option('output', {
            alias: 'o',
            type: 'string',
            description: 'Output file path',
            default: 'bookmarks.html'
        })
        .demandCommand(1, 'At least one file path is required')
        .usage('Usage: $0 [options] <file1> [file2] ...')
        .help()
        .argv;

    const { folder, output, _ : filePaths } = argv;

    if (filePaths.length === 0) {
        console.error('No files provided.');
        process.exit(1);
    }

    const bookmarksObj = await createBookmarksFromFiles(filePaths, folder);
    const bookmarksHtml = netscape(bookmarksObj);

    await fs.writeFile(output, bookmarksHtml);
    console.log(`Bookmarks written to ${output}`);
}

main().catch(error => {
    console.error('An error occurred:', error);
    process.exit(1);
});